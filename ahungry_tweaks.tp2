BACKUP ~ahungry_deletefier/backup~
AUTHOR ~Ahungry~
VERSION 1.0

BEGIN ~Ahungry's Deletefier~ DESIGNATED 1 LABEL ahungry_deletefier_prelude
REQUIRE_PREDICATE (GAME_IS ~bgee bg2ee eet iwdee~) ~Game not supported.~

PRINT ~
WARNING: You will NOT be able to complete certain quests as expected with this mod.  Accepting that
will (perhaps) add some replayability - or let CLUAConsole be your friend for items you feel
you should have received (use NearInfinity or EEKeeper on another saved game to find the item codes).

Probability legend:

   0   = no items deleted (why are you installing this mod again?)
   50  = half of all items are deleted
   99  = items have a 1 percent chance to be present
   100 = all items are deleted that aren't script creations/random npc loot (probably a bad idea!)

Hint: On a megamod (200+ mods) I enjoy 90+ - it makes gear acquisition exciting again.~

BEGIN ~Ahungry's Deletefier: Accept Warning (choose Install to proceed)~ DESIGNATED 1000 LABEL ahungry_deletefier_warning
REQUIRE_PREDICATE (MOD_IS_INSTALLED ~ahungry_deletefier/ahungry_deletefier.tp2~ 1) ""

// Unconventional item formats from various mods out there
OUTER_SPRINT rx_uncon_weap ".*\(cms\|cleaver\|misc75\|cmswq\|cmdaq\|polsw\|cmt\|cmax\|xstap\|soaitm\|flail\|wand\)"

OUTER_SPRINT rx_uncon_armr ".*\(rr#\|cmar\|bdbrd\|deitm\|anclk\|sheart\|macloc\|cmheal\|perrin\|armo\|xadvb\|bardic\|xseq\|cdia\|c0wl\|band\|xsorc\|c0mn\|rsenc\|cotwiz\|xbrbwiz\|axe\|pla\|circ\)"

// Some mod with DS at start of items adds a ton of powerful gear
OUTER_SPRINT rx_uncon_ds "^ds"

// List items we will always allow to remain (mostly basic things we're downgrading to)
// This may also contain some quest specific gear we want to avoid deleting (in the last half of rx)
OUTER_SPRINT rx_keep "^\(scrl8c\|scrlpet\|cdax2h1\|rr#bow02\|rr#sap01\|halb01\|sw2h01\|sw1h20\|sw1h46\|sw1h43\|sw1h48\|sw1h07\|sw1h04\|leat04\|leat01\|staf01\|ringjoia\|ringjos\|dagg01\|dagg06\|dagg07\|dagg19\|dagg08\|dagg05\|slng01\|ax1h01\|ax1h04\|sper01\|hamm01\|halb01\|blun01\|blun02\|blun04\|blun06\|shld05\|shld08\|shld09\|shld11\|shld15\|brac05\|belt01\|shld16\|shld14\|shld13\|shld12\|shld10\|shld01\|shld04\|shld03\|xbow01\|xbow04\|bow01\|bow03\|bow05\|helm01\|helm02\|helm03\|chan01\|plat01\|chan04\|bull01\|arow01\|bolt01\|dart01\|potn08\|potn20\|c0samag\|c0sascr\|c0sapot\|sw1h12\)"

BEGIN ~Ahungry's Deletefier: Stores~ DESIGNATED 2000 LABEL ahungry_deletefier_stores
REQUIRE_PREDICATE (MOD_IS_INSTALLED ~ahungry_deletefier/ahungry_deletefier.tp2~ 1000) ""

PRINT ~
Delete what percent of store items (books, misc, and some basic items will remain)?
Please enter your answer as an integer. [0-100]~
ACTION_READLN ~del_per_sto~

OUTER_WHILE NOT(IS_AN_INT %del_per_sto%) BEGIN
  PRINT ~Your answer was not an integer.
Please enter your answer as an integer.
What percent of store items would you like to have disappear?~
  ACTION_READLN ~del_per_sto~
END

PRINT ~Removing %del_per_sto% percent of store items, please be patient...~

// https://gibberlings3.github.io/iesdp/file_formats/ie_formats/sto_v1.htm
COPY_EXISTING_REGEXP GLOB ~^.+\.sto$~ ~override~
  // Iterate through items to see replaceable ones vs deleteables
  READ_LONG  0x34 itm_off
  READ_LONG  0x38 itm_num

  FOR (index = 0 ; index < itm_num ; ++index) BEGIN // searches through items
    READ_ASCII (itm_off + (0x1c * index)) item

    // Avoid removing basic items
    PATCH_IF ("%item%" STRING_COMPARE_REGEXP "%rx_keep%" = 1) BEGIN

      // PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*\(misc\|book\|bag\)" != 0) AND RANDOM(1 100) <= %del_per_sto% BEGIN // find NOT item
      //   WRITE_ASCII (itm_off + (0x1c * index)) "misc17" #8 // replace with dummy item
      // END

      PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*staf" = 0) AND RANDOM(1 100) <= %del_per_sto% BEGIN // find staff item
        WRITE_ASCII (itm_off + (0x1c * index)) "misc17" #8 // replace with staf01
      END

      PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*sw1h" = 0) AND RANDOM(1 100) <= %del_per_sto% BEGIN // find item
        WRITE_ASCII (itm_off + (0x1c * index)) "misc17" #8 // replace item
      END

      // Unconventional mod weapons
      PATCH_IF ("%item%" STRING_COMPARE_REGEXP "%rx_uncon_weap%" = 0) AND RANDOM(1 100) <= %del_per_sto% BEGIN // find item
        WRITE_ASCII (itm_off + (0x1c * index)) "misc17" #8 // replace item
      END

      // Unconventional mod armor
      PATCH_IF ("%item%" STRING_COMPARE_REGEXP "%rx_uncon_armr%" = 0) AND RANDOM(1 100) <= %del_per_sto% BEGIN // find item
        WRITE_ASCII (itm_off + (0x1c * index)) "misc17" #8 // replace item
      END

      // Unconventional DS stuff
      PATCH_IF ("%item%" STRING_COMPARE_REGEXP "%rx_uncon_ds%" = 0) AND RANDOM(1 100) <= %del_per_sto% BEGIN // find item
        WRITE_ASCII (itm_off + (0x1c * index)) "misc17" #8 // replace item
      END

      PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*sw2h" = 0) AND RANDOM(1 100) <= %del_per_sto% BEGIN // find item
        WRITE_ASCII (itm_off + (0x1c * index)) "misc17" #8 // replace item
      END

      PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*dagg" = 0) AND RANDOM(1 100) <= %del_per_sto% BEGIN // find item
        WRITE_ASCII (itm_off + (0x1c * index)) "misc17" #8 // replace item
      END

      PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*ax1h" = 0) AND RANDOM(1 100) <= %del_per_sto% BEGIN // find item
        WRITE_ASCII (itm_off + (0x1c * index)) "misc17" #8 // replace item
      END

      PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*ax2h" = 0) AND RANDOM(1 100) <= %del_per_sto% BEGIN // find item
        WRITE_ASCII (itm_off + (0x1c * index)) "misc17" #8 // replace item
      END

      PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*sper" = 0) AND RANDOM(1 100) <= %del_per_sto% BEGIN // find item
        WRITE_ASCII (itm_off + (0x1c * index)) "misc17" #8 // replace item
      END

      PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*hamm" = 0) AND RANDOM(1 100) <= %del_per_sto% BEGIN // find item
        WRITE_ASCII (itm_off + (0x1c * index)) "misc17" #8 // replace item
      END

      PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*halb" = 0) AND RANDOM(1 100) <= %del_per_sto% BEGIN // find item
        WRITE_ASCII (itm_off + (0x1c * index)) "misc17" #8 // replace item
      END

      PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*blun" = 0) AND RANDOM(1 100) <= %del_per_sto% BEGIN // find item
        WRITE_ASCII (itm_off + (0x1c * index)) "misc17" #8 // replace item
      END

      PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*scim" = 0) AND RANDOM(1 100) <= %del_per_sto% BEGIN // find item
        WRITE_ASCII (itm_off + (0x1c * index)) "misc17" #8 // replace item
      END

      PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*waki" = 0) AND RANDOM(1 100) <= %del_per_sto% BEGIN // find item
        WRITE_ASCII (itm_off + (0x1c * index)) "misc17" #8 // replace item
      END

      PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*kata" = 0) AND RANDOM(1 100) <= %del_per_sto% BEGIN // find item
        WRITE_ASCII (itm_off + (0x1c * index)) "misc17" #8 // replace item
      END

      PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*sw3h" = 0) AND RANDOM(1 100) <= %del_per_sto% BEGIN // find item
        WRITE_ASCII (itm_off + (0x1c * index)) "misc17" #8 // replace item
      END

      PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*mace" = 0) AND RANDOM(1 100) <= %del_per_sto% BEGIN // find item
        WRITE_ASCII (itm_off + (0x1c * index)) "misc17" #8 // replace item
      END

      PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*shield" = 0) AND RANDOM(1 100) <= %del_per_sto% BEGIN // find item
        WRITE_ASCII (itm_off + (0x1c * index)) "misc17" #8 // replace item
      END

      PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*shld" = 0) AND RANDOM(1 100) <= %del_per_sto% BEGIN // find item
        WRITE_ASCII (itm_off + (0x1c * index)) "misc17" #8 // replace item
      END

      PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*shbu" = 0) AND RANDOM(1 100) <= %del_per_sto% BEGIN // find item
        WRITE_ASCII (itm_off + (0x1c * index)) "misc17" #8 // replace item
      END

      PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*shlg" = 0) AND RANDOM(1 100) <= %del_per_sto% BEGIN // find item
        WRITE_ASCII (itm_off + (0x1c * index)) "misc17" #8 // replace item
      END

      PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*shmd" = 0) AND RANDOM(1 100) <= %del_per_sto% BEGIN // find item
        WRITE_ASCII (itm_off + (0x1c * index)) "misc17" #8 // replace item
      END

      PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*shsm" = 0) AND RANDOM(1 100) <= %del_per_sto% BEGIN // find item
        WRITE_ASCII (itm_off + (0x1c * index)) "misc17" #8 // replace item
      END

      PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*xbow" = 0) AND RANDOM(1 100) <= %del_per_sto% BEGIN // find item
        WRITE_ASCII (itm_off + (0x1c * index)) "misc17" #8 // replace item
      END

      PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*bow" = 0) AND RANDOM(1 100) <= %del_per_sto% BEGIN // find item
        WRITE_ASCII (itm_off + (0x1c * index)) "misc17" #8 // replace item
      END

      PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*slng" = 0) AND RANDOM(1 100) <= %del_per_sto% BEGIN // find item
        WRITE_ASCII (itm_off + (0x1c * index)) "misc17" #8 // replace item
      END

      PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*hel" = 0) AND RANDOM(1 100) <= %del_per_sto% BEGIN // find item
        WRITE_ASCII (itm_off + (0x1c * index)) "misc17" #8 // replace item
      END

      PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*helm" = 0) AND RANDOM(1 100) <= %del_per_sto% BEGIN // find item
        WRITE_ASCII (itm_off + (0x1c * index)) "misc17" #8 // replace item
      END

      PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*ioun" = 0) AND RANDOM(1 100) <= %del_per_sto% BEGIN // find item
        WRITE_ASCII (itm_off + (0x1c * index)) "misc17" #8 // replace item
      END

      PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*cowl" = 0) AND RANDOM(1 100) <= %del_per_sto% BEGIN // find item
        WRITE_ASCII (itm_off + (0x1c * index)) "misc17" #8 // replace item
      END

      PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*amul" = 0) AND RANDOM(1 100) <= %del_per_sto% BEGIN // find item
        WRITE_ASCII (itm_off + (0x1c * index)) "misc17" #8 // replace item
      END

      PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*boot" = 0) AND RANDOM(1 100) <= %del_per_sto% BEGIN // find item
        WRITE_ASCII (itm_off + (0x1c * index)) "misc17" #8 // replace item
      END

      PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*belt" = 0) AND RANDOM(1 100) <= %del_per_sto% BEGIN // find item
        WRITE_ASCII (itm_off + (0x1c * index)) "misc17" #8 // replace item
      END

      // clck handles cloaks AND robes for some reason...
      PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*clck" = 0) AND RANDOM(1 100) <= %del_per_sto% BEGIN // find item
      WRITE_ASCII (itm_off + (0x1c * index)) "misc17" #8 // replace item
      END

      PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*ring" = 0) AND RANDOM(1 100) <= %del_per_sto% BEGIN // find item
        WRITE_ASCII (itm_off + (0x1c * index)) "misc17" #8 // replace item
      END

      PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*brac" = 0) AND RANDOM(1 100) <= %del_per_sto% BEGIN // find item
        WRITE_ASCII (itm_off + (0x1c * index)) "misc17" #8 // replace item
      END

      PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*robe" = 0) AND RANDOM(1 100) <= %del_per_sto% BEGIN // find item
        WRITE_ASCII (itm_off + (0x1c * index)) "misc17" #8 // replace item
      END

      PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*leat" = 0) AND RANDOM(1 100) <= %del_per_sto% BEGIN // find item
        WRITE_ASCII (itm_off + (0x1c * index)) "misc17" #8 // replace item
      END

      PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*chan" = 0) AND RANDOM(1 100) <= %del_per_sto% BEGIN // find item
        WRITE_ASCII (itm_off + (0x1c * index)) "misc17" #8 // replace item
      END

      PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*plat" = 0) AND RANDOM(1 100) <= %del_per_sto% BEGIN // find item
        WRITE_ASCII (itm_off + (0x1c * index)) "misc17" #8 // replace item
      END

      PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*armr" = 0) AND RANDOM(1 100) <= %del_per_sto% BEGIN // find item
        WRITE_ASCII (itm_off + (0x1c * index)) "misc17" #8 // replace item
      END

      PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*slea" = 0) AND RANDOM(1 100) <= %del_per_sto% BEGIN // find item
        WRITE_ASCII (itm_off + (0x1c * index)) "misc17" #8 // replace item
      END

      PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*pelt" = 0) AND RANDOM(1 100) <= %del_per_sto% BEGIN // find item
        WRITE_ASCII (itm_off + (0x1c * index)) "misc17" #8 // replace item
      END

      PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*hide" = 0) AND RANDOM(1 100) <= %del_per_sto% BEGIN // find item
        WRITE_ASCII (itm_off + (0x1c * index)) "misc17" #8 // replace item
      END

      PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*chan" = 0) AND RANDOM(1 100) <= %del_per_sto% BEGIN // find item
        WRITE_ASCII (itm_off + (0x1c * index)) "misc17" #8 // replace item
      END

      PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*spli" = 0) AND RANDOM(1 100) <= %del_per_sto% BEGIN // find item
        WRITE_ASCII (itm_off + (0x1c * index)) "misc17" #8 // replace item
      END

      PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*plah" = 0) AND RANDOM(1 100) <= %del_per_sto% BEGIN // find item
        WRITE_ASCII (itm_off + (0x1c * index)) "misc17" #8 // replace item
      END

      PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*plaf" = 0) AND RANDOM(1 100) <= %del_per_sto% BEGIN // find item
        WRITE_ASCII (itm_off + (0x1c * index)) "misc17" #8 // replace item
      END

      PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*arow" = 0) AND RANDOM(1 100) <= %del_per_sto% BEGIN // find item
        WRITE_ASCII (itm_off + (0x1c * index)) "misc17" #8 // replace item
      END

      PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*bull" = 0) AND RANDOM(1 100) <= %del_per_sto% BEGIN // find item
        WRITE_ASCII (itm_off + (0x1c * index)) "misc17" #8 // replace item
      END

      PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*bolt" = 0) AND RANDOM(1 100) <= %del_per_sto% BEGIN // find item
        WRITE_ASCII (itm_off + (0x1c * index)) "misc17" #8 // replace item
      END

      PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*dart" = 0) AND RANDOM(1 100) <= %del_per_sto% BEGIN // find item
        WRITE_ASCII (itm_off + (0x1c * index)) "misc17" #8 // replace item
      END

      PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*potn" = 0) AND RANDOM(1 100) <= %del_per_sto% BEGIN // find item
        WRITE_ASCII (itm_off + (0x1c * index)) "misc17" #8 // replace item
      END

      PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*scrl" = 0) AND RANDOM(1 100) <= %del_per_sto% BEGIN // find item
        WRITE_ASCII (itm_off + (0x1c * index)) "misc17" #8 // replace item
      END

    END // End of rx_keep IF
  END // End of item loop
BUT_ONLY // end of store pass 1

// A second pass on store to remove the misc17 that was added first time around
COPY_EXISTING_REGEXP GLOB ~^.+\.sto$~ ~override~
  LPF DELETE_STORE_ITEM STR_VAR item_to_delete = "misc17" END
BUT_ONLY // end of store pass 2



BEGIN ~Ahungry's Deletefier: Areas~ DESIGNATED 3000 LABEL ahungry_deletefier_areas
REQUIRE_PREDICATE (MOD_IS_INSTALLED ~ahungry_deletefier/ahungry_deletefier.tp2~ 1000) ""

PRINT ~
Delete what percent of area items (books, misc, and some basic items will remain)?
Please enter your answer as an integer. [0-100]~
ACTION_READLN ~del_per_are~

OUTER_WHILE NOT(IS_AN_INT %del_per_are%) BEGIN
  PRINT ~Your answer was not an integer.
Please enter your answer as an integer.
What percent of area items would you like to have disappear?~
  ACTION_READLN ~del_per_are~
END

PRINT ~Removing %del_per_are% percent of area items, please be patient...~

// https://gibberlings3.github.io/iesdp/file_formats/ie_formats/are_v1.htm
COPY_EXISTING_REGEXP GLOB ~^.+\.are$~ ~override~
  // Iterate through items to see replaceable ones vs deleteables
  READ_LONG  0x78 itm_off
  READ_SHORT  0x76 itm_num

  FOR (index = 0 ; index < itm_num ; ++index) BEGIN // searches through items
    READ_ASCII (itm_off + (0x14 * index)) item

    // Avoid removing basic items
    PATCH_IF ("%item%" STRING_COMPARE_REGEXP "%rx_keep%" = 1) BEGIN

      PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*staf" = 0) AND RANDOM(1 100) <= %del_per_are% BEGIN // find staff item
        WRITE_ASCII (itm_off + (0x14 * index)) "staf01" #8 // replace with staf01
      END

      PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*sw1h" = 0) AND RANDOM(1 100) <= %del_per_are% BEGIN // find item
        WRITE_ASCII (itm_off + (0x14 * index)) "sw1h01" #8 // replace item
      END

      // Unconventional mod weapons
      PATCH_IF ("%item%" STRING_COMPARE_REGEXP "%rx_uncon_weap%" = 0) AND RANDOM(1 100) <= %del_per_are% BEGIN // find item
        WRITE_ASCII (itm_off + (0x14 * index)) "sw1h01" #8 // replace item
      END

      // Unconventional mod armor
      PATCH_IF ("%item%" STRING_COMPARE_REGEXP "%rx_uncon_armr%" = 0) AND RANDOM(1 100) <= %del_per_are% BEGIN // find item
        WRITE_ASCII (itm_off + (0x14 * index)) "misc17" #8 // replace item
      END

      // Unconventional DS stuff
      PATCH_IF ("%item%" STRING_COMPARE_REGEXP "%rx_uncon_ds%" = 0) AND RANDOM(1 100) <= %del_per_are% BEGIN // find item
        WRITE_ASCII (itm_off + (0x14 * index)) "misc17" #8 // replace item
      END

      PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*sw2h" = 0) AND RANDOM(1 100) <= %del_per_are% BEGIN // find item
        WRITE_ASCII (itm_off + (0x14 * index)) "sw2h01" #8 // replace item
      END

      PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*dagg" = 0) AND RANDOM(1 100) <= %del_per_are% BEGIN // find item
        WRITE_ASCII (itm_off + (0x14 * index)) "dagg01" #8 // replace item
      END

      PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*ax1h" = 0) AND RANDOM(1 100) <= %del_per_are% BEGIN // find item
        WRITE_ASCII (itm_off + (0x14 * index)) "ax1h01" #8 // replace item
      END

      PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*ax2h" = 0) AND RANDOM(1 100) <= %del_per_are% BEGIN // find item
        WRITE_ASCII (itm_off + (0x14 * index)) "ax1h01" #8 // replace item
      END

      PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*sper" = 0) AND RANDOM(1 100) <= %del_per_are% BEGIN // find item
        WRITE_ASCII (itm_off + (0x14 * index)) "sper01" #8 // replace item
      END

      PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*hamm" = 0) AND RANDOM(1 100) <= %del_per_are% BEGIN // find item
        WRITE_ASCII (itm_off + (0x14 * index)) "hamm01" #8 // replace item
      END

      PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*halb" = 0) AND RANDOM(1 100) <= %del_per_are% BEGIN // find item
        WRITE_ASCII (itm_off + (0x14 * index)) "halb01" #8 // replace item
      END

      PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*blun" = 0) AND RANDOM(1 100) <= %del_per_are% BEGIN // find item
        WRITE_ASCII (itm_off + (0x14 * index)) "blun01" #8 // replace item
      END

      PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*scim" = 0) AND RANDOM(1 100) <= %del_per_are% BEGIN // find item
        WRITE_ASCII (itm_off + (0x14 * index)) "sw1h04" #8 // replace item
      END

      PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*waki" = 0) AND RANDOM(1 100) <= %del_per_are% BEGIN // find item
        WRITE_ASCII (itm_off + (0x14 * index)) "sw1h04" #8 // replace item
      END

      PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*kata" = 0) AND RANDOM(1 100) <= %del_per_are% BEGIN // find item
        WRITE_ASCII (itm_off + (0x14 * index)) "sw1h04" #8 // replace item
      END

      PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*sw3h" = 0) AND RANDOM(1 100) <= %del_per_are% BEGIN // find item
        WRITE_ASCII (itm_off + (0x14 * index)) "sw1h04" #8 // replace item
      END

      PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*mace" = 0) AND RANDOM(1 100) <= %del_per_are% BEGIN // find item
        WRITE_ASCII (itm_off + (0x14 * index)) "blun04" #8 // replace item
      END

      PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*shield" = 0) AND RANDOM(1 100) <= %del_per_are% BEGIN // find item
        WRITE_ASCII (itm_off + (0x14 * index)) "shld01" #8 // replace item
      END

      PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*shld" = 0) AND RANDOM(1 100) <= %del_per_are% BEGIN // find item
        WRITE_ASCII (itm_off + (0x14 * index)) "shld01" #8 // replace item
      END

      PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*shbu" = 0) AND RANDOM(1 100) <= %del_per_are% BEGIN // find item
        WRITE_ASCII (itm_off + (0x14 * index)) "shld08" #8 // replace item
      END

      PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*shlg" = 0) AND RANDOM(1 100) <= %del_per_are% BEGIN // find item
        WRITE_ASCII (itm_off + (0x14 * index)) "shld04" #8 // replace item
      END

      PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*shmd" = 0) AND RANDOM(1 100) <= %del_per_are% BEGIN // find item
        WRITE_ASCII (itm_off + (0x14 * index)) "shld03" #8 // replace item
      END

      PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*shsm" = 0) AND RANDOM(1 100) <= %del_per_are% BEGIN // find item
        WRITE_ASCII (itm_off + (0x14 * index)) "shld01" #8 // replace item
      END

      PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*xbow" = 0) AND RANDOM(1 100) <= %del_per_are% BEGIN // find item
        WRITE_ASCII (itm_off + (0x14 * index)) "xbow01" #8 // replace item
      END

      PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*bow" = 0) AND RANDOM(1 100) <= %del_per_are% BEGIN // find item
        WRITE_ASCII (itm_off + (0x14 * index)) "bow05" #8 // replace item
      END

      PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*slng" = 0) AND RANDOM(1 100) <= %del_per_are% BEGIN // find item
        WRITE_ASCII (itm_off + (0x14 * index)) "slng01" #8 // replace item
      END

      PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*hel" = 0) AND RANDOM(1 100) <= %del_per_are% BEGIN // find item
        WRITE_ASCII (itm_off + (0x14 * index)) "helm01" #8 // replace item
      END

      PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*helm" = 0) AND RANDOM(1 100) <= %del_per_are% BEGIN // find item
        WRITE_ASCII (itm_off + (0x14 * index)) "helm01" #8 // replace item
      END

      PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*ioun" = 0) AND RANDOM(1 100) <= %del_per_are% BEGIN // find item
        WRITE_ASCII (itm_off + (0x14 * index)) "helm01" #8 // replace item
      END

      PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*cowl" = 0) AND RANDOM(1 100) <= %del_per_are% BEGIN // find item
        WRITE_ASCII (itm_off + (0x14 * index)) "helm01" #8 // replace item
      END

      PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*amul" = 0) AND RANDOM(1 100) <= %del_per_are% BEGIN // find item
        WRITE_ASCII (itm_off + (0x14 * index)) "amul02" #8 // replace item
      END

      PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*boot" = 0) AND RANDOM(1 100) <= %del_per_are% BEGIN // find item
        WRITE_ASCII (itm_off + (0x14 * index)) "misc17" #8 // replace item
      END

      PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*belt" = 0) AND RANDOM(1 100) <= %del_per_are% BEGIN // find item
        WRITE_ASCII (itm_off + (0x14 * index)) "belt01" #8 // replace item
      END

      // clck handles cloaks AND robes for some reason...
      PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*clck" = 0) AND RANDOM(1 100) <= %del_per_are% BEGIN // find item
      WRITE_ASCII (itm_off + (0x14 * index)) "misc17" #8 // replace item
      END

      PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*ring" = 0) AND RANDOM(1 100) <= %del_per_are% BEGIN // find item
        WRITE_ASCII (itm_off + (0x14 * index)) "ring01" #8 // replace item
      END

      PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*brac" = 0) AND RANDOM(1 100) <= %del_per_are% BEGIN // find item
        WRITE_ASCII (itm_off + (0x14 * index)) "brac01" #8 // replace item
      END

      PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*robe" = 0) AND RANDOM(1 100) <= %del_per_are% BEGIN // find item
        WRITE_ASCII (itm_off + (0x14 * index)) "clck11" #8 // replace item
      END

      PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*leat" = 0) AND RANDOM(1 100) <= %del_per_are% BEGIN // find item
        WRITE_ASCII (itm_off + (0x14 * index)) "leat01" #8 // replace item
      END

      PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*chan" = 0) AND RANDOM(1 100) <= %del_per_are% BEGIN // find item
        WRITE_ASCII (itm_off + (0x14 * index)) "chan01" #8 // replace item
      END

      PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*plat" = 0) AND RANDOM(1 100) <= %del_per_are% BEGIN // find item
        WRITE_ASCII (itm_off + (0x14 * index)) "plat01" #8 // replace item
      END

      PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*armr" = 0) AND RANDOM(1 100) <= %del_per_are% BEGIN // find item
        WRITE_ASCII (itm_off + (0x14 * index)) "leat01" #8 // replace item
      END

      PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*slea" = 0) AND RANDOM(1 100) <= %del_per_are% BEGIN // find item
        WRITE_ASCII (itm_off + (0x14 * index)) "leat01" #8 // replace item
      END

      PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*pelt" = 0) AND RANDOM(1 100) <= %del_per_are% BEGIN // find item
        WRITE_ASCII (itm_off + (0x14 * index)) "leat01" #8 // replace item
      END

      PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*hide" = 0) AND RANDOM(1 100) <= %del_per_are% BEGIN // find item
        WRITE_ASCII (itm_off + (0x14 * index)) "leat01" #8 // replace item
      END

      PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*chan" = 0) AND RANDOM(1 100) <= %del_per_are% BEGIN // find item
        WRITE_ASCII (itm_off + (0x14 * index)) "chan01" #8 // replace item
      END

      PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*spli" = 0) AND RANDOM(1 100) <= %del_per_are% BEGIN // find item
        WRITE_ASCII (itm_off + (0x14 * index)) "chan04" #8 // replace item
      END

      PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*plah" = 0) AND RANDOM(1 100) <= %del_per_are% BEGIN // find item
        WRITE_ASCII (itm_off + (0x14 * index)) "plat01" #8 // replace item
      END

      PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*plaf" = 0) AND RANDOM(1 100) <= %del_per_are% BEGIN // find item
        WRITE_ASCII (itm_off + (0x14 * index)) "plat01" #8 // replace item
      END

      PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*arow" = 0) AND RANDOM(1 100) <= %del_per_are% BEGIN // find item
        WRITE_ASCII (itm_off + (0x14 * index)) "arow01" #8 // replace item
      END

      PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*bull" = 0) AND RANDOM(1 100) <= %del_per_are% BEGIN // find item
        WRITE_ASCII (itm_off + (0x14 * index)) "bull01" #8 // replace item
      END

      PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*bolt" = 0) AND RANDOM(1 100) <= %del_per_are% BEGIN // find item
        WRITE_ASCII (itm_off + (0x14 * index)) "bolt01" #8 // replace item
      END

      PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*dart" = 0) AND RANDOM(1 100) <= %del_per_are% BEGIN // find item
        WRITE_ASCII (itm_off + (0x14 * index)) "dart01" #8 // replace item
      END

      PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*potn" = 0) AND RANDOM(1 100) <= %del_per_are% BEGIN // find item
        WRITE_ASCII (itm_off + (0x14 * index)) "potn08" #8 // replace item
      END

      PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*scrl" = 0) AND RANDOM(1 100) <= %del_per_are% BEGIN // find item
        WRITE_ASCII (itm_off + (0x14 * index)) "misc17" #8 // replace item
      END

      // Brute force fallback patches out a ton of stuff...
      // PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*\(staf\|sw1h\|sw2h\|dagg\|ax1h\|ax2h\|sper\|hamm\|halb\|blun\|scim\|waki\|kata\|sw3h\|mace\|shld\|shbu\|shlg\|shmd\|shsm\|xbow\|bow\|slng\|helm\|ioun\|cowl\|amul\|boot\|belt\|clck\|ring\|brac\|robe\|leat\|chan\|plat\|armr\|slea\|pelt\|hide\|chan\|spli\|plah\|plaf\|misc\|book\|bag\|potn\|arow\|dart\|bull\|bolt\)" != 0) AND RANDOM(1 100) <= %del_per_are% BEGIN // find NOT item
      //   WRITE_ASCII (itm_off + (0x14 * index)) "misc17" #8 // replace
      // END
    END // End of rx_keep IF
  END // End of area item loop

BUT_ONLY // End of areas pass 1

// https://gibberlings3.github.io/iesdp/file_formats/ie_formats/are_v1.htm
COPY_EXISTING_REGEXP GLOB ~^.+\.are$~ ~override~
  LPF DELETE_AREA_ITEM STR_VAR item_to_delete = "misc17" END
BUT_ONLY // End of areas pass 2




BEGIN ~Ahungry's Deletefier: Creatures~ DESIGNATED 4000 LABEL ahungry_deletefier_creatures
REQUIRE_PREDICATE (MOD_IS_INSTALLED ~ahungry_deletefier/ahungry_deletefier.tp2~ 1000) ""

PRINT ~
Delete what percent of creature items (books, misc, and some basic items will remain)?
Please enter your answer as an integer. [0-100]~
ACTION_READLN ~del_per_cre~

OUTER_WHILE NOT(IS_AN_INT %del_per_cre%) BEGIN
  PRINT ~Your answer was not an integer.
Please enter your answer as an integer.
What percent of creature items would you like to have disappear?~
  ACTION_READLN ~del_per_cre~
END

PRINT ~Removing %del_per_cre% percent of creature items, please be patient (slow)...~

// https://gibberlings3.github.io/iesdp/file_formats/ie_formats/cre_v1.htm
COPY_EXISTING_REGEXP GLOB ~^.+\.cre$~ ~override~
  // Iterate through items to see replaceable ones vs deleteables
  READ_LONG  0x2bc itm_off
  READ_LONG  0x2c0 itm_num

  // https://gibberlings3.github.io/iesdp/files/ids/bg2/general.htm
  // Check if human or not - leave non-humanoids alone
  READ_BYTE 0x271 general_byte

  PATCH_IF general_byte = 0x1 BEGIN
    FOR (index = 0 ; index < itm_num ; ++index) BEGIN // searches through items
      READ_ASCII (itm_off + (0x14 * index)) item

      // Avoid removing basic items
      PATCH_IF ("%item%" STRING_COMPARE_REGEXP "%rx_keep%" = 1) BEGIN
        // // This was lifted from setup-cdtweaks.tp2 - shows how to make an item identified - how to check it? hmmm
        // // WRITE_BYTE (itm_off + 0x10 + (0x14 * index)) (THIS BOR 0b00000001) // adds identified flag
        // READ_BYTE (itm_off + 0x10 + (0x14 * index)) identified_byte
        // SET is_identified = identified_byte BAND 0b00000001 // all the zeros mask out the stuff we ignore, we need matching 1s


        // Ok, slots reference indexes in this item data - we could check if stuff was equipped or not
        // Using is_identified NOT identified will let us get unidentified items with this, but we will still
        // end up scooping up basic gear, as the creature is_identified bit acts like an override (if an item itself
        // is never unidentified to begin with, this bit is simply missing most the time)
        // PATCH_IF is_identified = 0 BEGIN

        PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*staf" = 0) AND RANDOM(1 100) <= %del_per_cre% BEGIN // find staff item
          WRITE_ASCII (itm_off + (0x14 * index)) "staf01" #8 // replace with staf01
        END

        PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*sw1h" = 0) AND RANDOM(1 100) <= %del_per_cre% BEGIN // find item
          WRITE_ASCII (itm_off + (0x14 * index)) "sw1h01" #8 // replace item
        END

        // Unconventional mod weapons
        PATCH_IF ("%item%" STRING_COMPARE_REGEXP "%rx_uncon_weap%" = 0) AND RANDOM(1 100) <= %del_per_cre% BEGIN // find item
          WRITE_ASCII (itm_off + (0x14 * index)) "sw1h01" #8 // replace item
        END

        // Unconventional mod armor
        PATCH_IF ("%item%" STRING_COMPARE_REGEXP "%rx_uncon_armr%" = 0) AND RANDOM(1 100) <= %del_per_cre% BEGIN // find item
          WRITE_ASCII (itm_off + (0x14 * index)) "misc17" #8 // replace item
        END

        // Unconventional DS stuff
        PATCH_IF ("%item%" STRING_COMPARE_REGEXP "%rx_uncon_ds%" = 0) AND RANDOM(1 100) <= %del_per_cre% BEGIN // find item
          WRITE_ASCII (itm_off + (0x14 * index)) "misc17" #8 // replace item
        END

        PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*sw2h" = 0) AND RANDOM(1 100) <= %del_per_cre% BEGIN // find item
          WRITE_ASCII (itm_off + (0x14 * index)) "sw2h01" #8 // replace item
        END

        PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*dagg" = 0) AND RANDOM(1 100) <= %del_per_cre% BEGIN // find item
          WRITE_ASCII (itm_off + (0x14 * index)) "dagg01" #8 // replace item
        END

        PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*ax1h" = 0) AND RANDOM(1 100) <= %del_per_cre% BEGIN // find item
          WRITE_ASCII (itm_off + (0x14 * index)) "ax1h01" #8 // replace item
        END

        PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*ax2h" = 0) AND RANDOM(1 100) <= %del_per_cre% BEGIN // find item
          WRITE_ASCII (itm_off + (0x14 * index)) "ax1h01" #8 // replace item
        END

        PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*sper" = 0) AND RANDOM(1 100) <= %del_per_cre% BEGIN // find item
          WRITE_ASCII (itm_off + (0x14 * index)) "sper01" #8 // replace item
        END

        PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*hamm" = 0) AND RANDOM(1 100) <= %del_per_cre% BEGIN // find item
          WRITE_ASCII (itm_off + (0x14 * index)) "hamm01" #8 // replace item
        END

        PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*halb" = 0) AND RANDOM(1 100) <= %del_per_cre% BEGIN // find item
          WRITE_ASCII (itm_off + (0x14 * index)) "halb01" #8 // replace item
        END

        PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*blun" = 0) AND RANDOM(1 100) <= %del_per_cre% BEGIN // find item
          WRITE_ASCII (itm_off + (0x14 * index)) "blun01" #8 // replace item
        END

        PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*scim" = 0) AND RANDOM(1 100) <= %del_per_cre% BEGIN // find item
          WRITE_ASCII (itm_off + (0x14 * index)) "sw1h04" #8 // replace item
        END

        PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*waki" = 0) AND RANDOM(1 100) <= %del_per_cre% BEGIN // find item
          WRITE_ASCII (itm_off + (0x14 * index)) "sw1h04" #8 // replace item
        END

        PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*kata" = 0) AND RANDOM(1 100) <= %del_per_cre% BEGIN // find item
          WRITE_ASCII (itm_off + (0x14 * index)) "sw1h04" #8 // replace item
        END

        PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*sw3h" = 0) AND RANDOM(1 100) <= %del_per_cre% BEGIN // find item
          WRITE_ASCII (itm_off + (0x14 * index)) "sw1h04" #8 // replace item
        END

        PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*mace" = 0) AND RANDOM(1 100) <= %del_per_cre% BEGIN // find item
          WRITE_ASCII (itm_off + (0x14 * index)) "blun04" #8 // replace item
        END

        PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*shield" = 0) AND RANDOM(1 100) <= %del_per_cre% BEGIN // find item
          WRITE_ASCII (itm_off + (0x14 * index)) "shld01" #8 // replace item
        END

        PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*shld" = 0) AND RANDOM(1 100) <= %del_per_cre% BEGIN // find item
          WRITE_ASCII (itm_off + (0x14 * index)) "shld01" #8 // replace item
        END

        PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*shbu" = 0) AND RANDOM(1 100) <= %del_per_cre% BEGIN // find item
          WRITE_ASCII (itm_off + (0x14 * index)) "shld08" #8 // replace item
        END

        PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*shlg" = 0) AND RANDOM(1 100) <= %del_per_cre% BEGIN // find item
          WRITE_ASCII (itm_off + (0x14 * index)) "shld04" #8 // replace item
        END

        PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*shmd" = 0) AND RANDOM(1 100) <= %del_per_cre% BEGIN // find item
          WRITE_ASCII (itm_off + (0x14 * index)) "shld03" #8 // replace item
        END

        PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*shsm" = 0) AND RANDOM(1 100) <= %del_per_cre% BEGIN // find item
          WRITE_ASCII (itm_off + (0x14 * index)) "shld01" #8 // replace item
        END

        PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*xbow" = 0) AND RANDOM(1 100) <= %del_per_cre% BEGIN // find item
          WRITE_ASCII (itm_off + (0x14 * index)) "xbow01" #8 // replace item
        END

        PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*bow" = 0) AND RANDOM(1 100) <= %del_per_cre% BEGIN // find item
          WRITE_ASCII (itm_off + (0x14 * index)) "bow05" #8 // replace item
        END

        PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*slng" = 0) AND RANDOM(1 100) <= %del_per_cre% BEGIN // find item
          WRITE_ASCII (itm_off + (0x14 * index)) "slng01" #8 // replace item
        END

        PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*hel" = 0) AND RANDOM(1 100) <= %del_per_cre% BEGIN // find item
          WRITE_ASCII (itm_off + (0x14 * index)) "helm01" #8 // replace item
        END

        PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*helm" = 0) AND RANDOM(1 100) <= %del_per_cre% BEGIN // find item
          WRITE_ASCII (itm_off + (0x14 * index)) "helm01" #8 // replace item
        END

        PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*ioun" = 0) AND RANDOM(1 100) <= %del_per_cre% BEGIN // find item
          WRITE_ASCII (itm_off + (0x14 * index)) "helm01" #8 // replace item
        END

        PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*cowl" = 0) AND RANDOM(1 100) <= %del_per_cre% BEGIN // find item
          WRITE_ASCII (itm_off + (0x14 * index)) "helm01" #8 // replace item
        END

        PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*amul" = 0) AND RANDOM(1 100) <= %del_per_cre% BEGIN // find item
          WRITE_ASCII (itm_off + (0x14 * index)) "amul02" #8 // replace item
        END

        PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*boot" = 0) AND RANDOM(1 100) <= %del_per_cre% BEGIN // find item
          WRITE_ASCII (itm_off + (0x14 * index)) "misc17" #8 // replace item
        END

        PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*belt" = 0) AND RANDOM(1 100) <= %del_per_cre% BEGIN // find item
          WRITE_ASCII (itm_off + (0x14 * index)) "belt01" #8 // replace item
        END

        // clck handles cloaks AND robes for some reason...
        PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*clck" = 0) AND RANDOM(1 100) <= %del_per_cre% BEGIN // find item
        WRITE_ASCII (itm_off + (0x14 * index)) "misc17" #8 // replace item
        END

        PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*ring" = 0) AND RANDOM(1 100) <= %del_per_cre% BEGIN // find item
          WRITE_ASCII (itm_off + (0x14 * index)) "ring01" #8 // replace item
        END

        PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*brac" = 0) AND RANDOM(1 100) <= %del_per_cre% BEGIN // find item
          WRITE_ASCII (itm_off + (0x14 * index)) "brac05" #8 // replace item
        END

        PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*robe" = 0) AND RANDOM(1 100) <= %del_per_cre% BEGIN // find item
          WRITE_ASCII (itm_off + (0x14 * index)) "clck11" #8 // replace item
        END

        PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*leat" = 0) AND RANDOM(1 100) <= %del_per_cre% BEGIN // find item
          WRITE_ASCII (itm_off + (0x14 * index)) "leat01" #8 // replace item
        END

        PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*chan" = 0) AND RANDOM(1 100) <= %del_per_cre% BEGIN // find item
          WRITE_ASCII (itm_off + (0x14 * index)) "chan01" #8 // replace item
        END

        PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*plat" = 0) AND RANDOM(1 100) <= %del_per_cre% BEGIN // find item
          WRITE_ASCII (itm_off + (0x14 * index)) "plat01" #8 // replace item
        END

        PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*armr" = 0) AND RANDOM(1 100) <= %del_per_cre% BEGIN // find item
          WRITE_ASCII (itm_off + (0x14 * index)) "leat01" #8 // replace item
        END

        PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*slea" = 0) AND RANDOM(1 100) <= %del_per_cre% BEGIN // find item
          WRITE_ASCII (itm_off + (0x14 * index)) "leat01" #8 // replace item
        END

        PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*pelt" = 0) AND RANDOM(1 100) <= %del_per_cre% BEGIN // find item
          WRITE_ASCII (itm_off + (0x14 * index)) "leat01" #8 // replace item
        END

        PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*hide" = 0) AND RANDOM(1 100) <= %del_per_cre% BEGIN // find item
          WRITE_ASCII (itm_off + (0x14 * index)) "leat01" #8 // replace item
        END

        PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*chan" = 0) AND RANDOM(1 100) <= %del_per_cre% BEGIN // find item
          WRITE_ASCII (itm_off + (0x14 * index)) "chan01" #8 // replace item
        END

        PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*spli" = 0) AND RANDOM(1 100) <= %del_per_cre% BEGIN // find item
          WRITE_ASCII (itm_off + (0x14 * index)) "chan04" #8 // replace item
        END

        PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*plah" = 0) AND RANDOM(1 100) <= %del_per_cre% BEGIN // find item
          WRITE_ASCII (itm_off + (0x14 * index)) "plat01" #8 // replace item
        END

        PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*plaf" = 0) AND RANDOM(1 100) <= %del_per_cre% BEGIN // find item
          WRITE_ASCII (itm_off + (0x14 * index)) "plat01" #8 // replace item
        END

        PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*arow" = 0) AND RANDOM(1 100) <= %del_per_cre% BEGIN // find item
          WRITE_ASCII (itm_off + (0x14 * index)) "arow01" #8 // replace item
        END

        PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*dart" = 0) AND RANDOM(1 100) <= %del_per_cre% BEGIN // find item
          WRITE_ASCII (itm_off + (0x14 * index)) "dart01" #8 // replace item
        END

        PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*bull" = 0) AND RANDOM(1 100) <= %del_per_cre% BEGIN // find item
          WRITE_ASCII (itm_off + (0x14 * index)) "bull01" #8 // replace item
        END

        PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*bolt" = 0) AND RANDOM(1 100) <= %del_per_cre% BEGIN // find item
          WRITE_ASCII (itm_off + (0x14 * index)) "bolt01" #8 // replace item
        END

        PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*dart" = 0) AND RANDOM(1 100) <= %del_per_cre% BEGIN // find item
          WRITE_ASCII (itm_off + (0x14 * index)) "dart01" #8 // replace item
        END

        PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*potn" = 0) AND RANDOM(1 100) <= %del_per_cre% BEGIN // find item
          WRITE_ASCII (itm_off + (0x14 * index)) "potn08" #8 // replace item
        END

        PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*scrl" = 0) AND RANDOM(1 100) <= %del_per_cre% BEGIN // find item
          WRITE_ASCII (itm_off + (0x14 * index)) "misc17" #8 // replace item
        END

        // Delete random treasure items with the usual probability check
        PATCH_IF ("%item%" STRING_COMPARE_REGEXP "^rndtre" = 0) AND RANDOM(1 100) <= %del_per_cre% BEGIN // find item
          WRITE_ASCII (itm_off + (0x14 * index)) "misc17" #8 // replace item
        END

        // Brute force method to remove all other matches
        // PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*\(staf\|sw1h\|sw2h\|dagg\|ax1h\|ax2h\|sper\|hamm\|halb\|blun\|scim\|waki\|kata\|sw3h\|mace\|shld\|shbu\|shlg\|shmd\|shsm\|xbow\|bow\|slng\|helm\|ioun\|cowl\|amul\|boot\|belt\|clck\|ring\|brac\|robe\|leat\|chan\|plat\|armr\|slea\|pelt\|hide\|chan\|spli\|plah\|plaf\|misc\|book\|bag\|potn\|arow\|dart\|bull\|bolt\)" != 0) AND RANDOM(1 100) <= %del_per_cre% BEGIN // find NOT item
        //   WRITE_ASCII (itm_off + (0x14 * index)) "misc17" #8 // replace
        // END

      // END // End of the is_identified check
      END // End of rx_keep IF
    END // End of the item loop
  END // End of the human check
BUT_ONLY // end of items pass 1

COPY_EXISTING_REGEXP GLOB ~^.+\.cre$~ ~override~
  // Get rid of the PHer items we stubbed in
  LPF DELETE_CRE_ITEM STR_VAR item_to_delete = "misc17" END

  // Get rid of all random treasures that would usually drop
  // LPF DELETE_CRE_ITEM STR_VAR item_to_delete = "rndtre.." END
BUT_ONLY // end of items pass 2
